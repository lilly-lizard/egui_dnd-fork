use eframe::egui;
use eframe::egui::{CollapsingHeader, Id, Ui};

use egui_dnd::handle::DragHandle;
use egui_dnd::utils::shift_slice;
use egui_dnd::{DragDropResponse, DragDropUi, DragableItem};

pub fn main() -> () {
    let options = eframe::NativeOptions {
        viewport: egui::ViewportBuilder::default()
            .with_inner_size([320.0, 240.0])
            .with_drag_and_drop(true),
        ..Default::default()
    };
    eframe::run_native("DnD", options, Box::new(|_cc| Box::new(MyApp::default()))).unwrap();
}

#[derive(Default)]
struct SortableItem {
    name: String,

    children: Option<Vec<SortableItem>>,

    drag_drop_ui: DragDropUi,
}

impl DragableItem for SortableItem {
    fn drag_id(&self) -> Id {
        Id::new(&self.name)
    }
}

struct MyApp {
    items: Vec<SortableItem>,

    drag_drop_ui: DragDropUi,
}

impl Default for MyApp {
    fn default() -> Self {
        MyApp {
            drag_drop_ui: DragDropUi::default(),
            items: vec![
                SortableItem {
                    name: "a".to_string(),
                    ..SortableItem::default()
                },
                SortableItem {
                    name: "b".to_string(),
                    ..SortableItem::default()
                },
                SortableItem {
                    name: "c".to_string(),
                    ..SortableItem::default()
                },
                SortableItem {
                    name: "d".to_string(),
                    ..SortableItem::default()
                },
                SortableItem {
                    name: "e".to_string(),
                    children: Some(vec![
                        SortableItem {
                            name: "e_a".to_string(),
                            ..SortableItem::default()
                        },
                        SortableItem {
                            name: "e_b".to_string(),
                            ..SortableItem::default()
                        },
                        SortableItem {
                            name: "e_c".to_string(),
                            ..SortableItem::default()
                        },
                        SortableItem {
                            name: "e_d".to_string(),
                            ..SortableItem::default()
                        },
                    ]),
                    ..SortableItem::default()
                },
            ],
        }
    }
}

impl MyApp {
    fn draw_item(ui: &mut Ui, item: &SortableItem, handle: DragHandle) {
        handle.ui(ui, item, |ui| {
            ui.label(&item.name);
        });

        if let Some(children) = &item.children {
            CollapsingHeader::new("children")
                .default_open(true)
                .show(ui, |ui| {
                    ui.label("Content");

                    let response = item.drag_drop_ui.list_ui(
                        ui,
                        children.iter(),
                        |ui, handle, _index, item| {
                            Self::draw_item(ui, item, handle);
                        },
                    );

                    if let DragDropResponse::Completed(drag_indices) = response {
                        shift_slice(
                            drag_indices.source,
                            drag_indices.target,
                            children.as_mut_slice(),
                        );
                    }
                });
        };
    }
}

impl eframe::App for MyApp {
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        egui::CentralPanel::default().show(ctx, |ui| {
            let response =
                self.drag_drop_ui
                    .list_ui(ui, self.items.iter(), |ui, handle, _index, item| {
                        MyApp::draw_item(ui, item, handle);
                    });
            if let DragDropResponse::Completed(drag_indices) = response {
                shift_slice(drag_indices.source, drag_indices.target, &mut self.items);
            }
        });
    }
}
